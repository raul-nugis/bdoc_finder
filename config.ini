# This is ConfigParser configuration, a standard library intended for a Python script config
# https://docs.python.org/3.5/library/configparser.html
# This script has been tested under Win 10 64, Python 3.5.3, Python 3.6.5; Ubuntu 16 - for file analysis
#
# This script will look for 1) DD raw images in 'Image' subfolder, 2) candidate files in 'Files' subfolder.
# For files folder full path can be feed through commandline.
# Or 3) mounted images, based on raw or .E01 (see below).
# 2) images will be scanned, possible digitally signed files recovered from them, if config set to recover.
# 3) the DSD files (BDOC) will be exported to 'Results' subfolder. If file is a possible empty signature container
# it will have added 'Malformed_' to the name. Recovered data of interest will be written as CSV in script's root folder.
# In addition the script will be looking for 3) '//./PHYSICALDRIVE1' mounted image for example .E01. It assumes this 
# is the second drive with '//./PHYSICALDRIVE0' computer's main drive. The script will read it as physical drive
# starting with sector '0'. For this to work manual correct mounted drive size is required. If no drive is
# mounted the values must be empty like 'mounted =' and 'mounted_size ='.
[Pathes]
# This is subdirectory where raw images must be put.
image = Image
# This is the link of mounted .E01 or raw image, for example '//./PHYSICALDRIVE1'.
mounted = 
# This is the size of mounted image in bytes, it must be entered manually
mounted_size = 
# This is the subfolder where custom candidate files must be put
# for example 'undeleted_document_1.zip', 'undeleted_document_2.zip' etc
file = Files
# This is where undeleted or checked files will be exported. In addition, a report will be
# generated in script's root folder
result = Results
[Reporting]
# 'format_' can only be 'Short' or 'Long'
# 'Short' format will only produce name, personal code and timestamp per signature
# 'Long' format will produce full report
# 'carve' is to say whether file carve is enabled, True or not, False
# 'scriptfolder' is to say whether the files are in the folder where the
# .py 'script' is or in the 'local' folder where execution takes place
format_ = Long
# This is to tell script to carve files from images/mounted images
# or to copy checked files from 'raw' collection of files
carve = False
scriptfolder = script
[Geometry]
# This is geometry for images or mounted images, does not apply to existent files
# maximum_filesize of 10000 in this setup. This is max size of one carvable file and 
# it is in 'clusters'
clusters_per_sectors = 8
sector = 512
cluster_offset = 0
maximum_filesize = 10000
[Signature]
# This is file carving signature for images or mounted images, does not apply to existent files
# The distance {0,36} can theoretically be increased
# In such case 'header_lenght' of 105 must also be increased
header_hex_code = b'^PK\x03\x04(.|\s){26}mimetype(.|\s){0,36}(application\/vnd\.etsi\.asic\-e\+zip|K,\(\\\xc8\xc9LN,\xc9\xcc\xcf\xd3\/\xcbK\xd1K)'
# header_hex_code = b'^PK\x03\x04'
footer_hex_code = b'PK\x05\x06\x00\x00(.|\s){14}.*?(\x00{2}|.*[ -~])'
header_lenght = 105
[XML]
# This is what is to be exported from XML signature for futher decoding
tags_to_find_Base64 = 
	{http://www.w3.org/2000/09/xmldsig#}X509Certificate
	{http://uri.etsi.org/01903/v1.3.2#}EncapsulatedTimeStamp
	{http://uri.etsi.org/01903/v1.3.2#}EncapsulatedX509Certificate
	{http://uri.etsi.org/01903/v1.3.2#}EncapsulatedX509Certificate
	{http://uri.etsi.org/01903/v1.3.2#}EncapsulatedOCSPValue
# This is what to be exported from XML signature ready for report
tags_to_find_plaintext = 
	{http://uri.etsi.org/01903/v1.3.2#}SigningTime
	{http://www.w3.org/2000/09/xmldsig#}X509IssuerName
	{http://www.w3.org/2000/09/xmldsig#}X509SerialNumber
	{http://uri.etsi.org/01903/v1.3.2#}IssuerSerial
	{http://uri.etsi.org/01903/v1.3.2#}SignatureProductionPlace
	{http://uri.etsi.org/01903/v1.3.2#}City
	{http://uri.etsi.org/01903/v1.3.2#}StateOrProvince
	{http://uri.etsi.org/01903/v1.3.2#}PostalCode
	{http://uri.etsi.org/01903/v1.3.2#}CountryName
	{http://uri.etsi.org/01903/v1.3.2#}SignerRole
	{http://uri.etsi.org/01903/v1.3.2#}ClaimedRoles
	{http://uri.etsi.org/01903/v1.3.2#}ClaimedRole
	{http://uri.etsi.org/01903/v1.3.2#}ByName
	{http://uri.etsi.org/01903/v1.3.2#}ProducedAt
[ASN.1]
# This is what to be decoded from x.509 cert objects
# 3, this is about Certification Authority
# 5, this is personal data
# 4, are Cert validity dates
useful_attributes = 
	3
	4
	5